### **📌 컬렉션 프레임워크 (Collection Framework)**
- **널리 알려진 자료구조를 사용하여** 객체를 효율적으로 추가, 삭제, 검색할 수 있도록 미리 구현된 **인터페이스와 클래스의 집합**
- `java.util` 패키지에서 제공
- **컬렉션(Collection)**: 객체를 저장하는 자료구조  
- **프레임워크(Framework)**: 사용 방법이 정해진 라이브러리  

---

## **📌 주요 인터페이스**
| 인터페이스 | 특징 | 중복 허용 | 정렬 |
|------------|-------------------|-----------|------|
| **List** | 순서가 있는 저장 방식 | ✅ O | ✅ 유지 |
| **Set** | 순서가 없는 저장 방식 | ❌ X | ❌ 없음 |
| **Map** | Key-Value 형태 저장 | ❌ (Key 중복X) | ❌ 없음 |

---

## **📌 주요 컬렉션 종류**
### **1. List (순서가 있는 자료구조, 중복 허용)**
| 구현 클래스 | 특징 |
|-------------|----------------|
| `ArrayList<E>` | 배열 기반, 검색 빠름 |
| `LinkedList<E>` | 연결 리스트 기반, 삽입/삭제 빠름 |
| `Vector<E>` | 동기화 지원 (멀티스레드 환경) |
| `Stack<E>` | LIFO(후입선출) 구조 |

**✅ 예제**
```java
List<String> list = new ArrayList<>();
list.add("A");
list.add("B");
list.add("C");
System.out.println(list); // [A, B, C]
```

---

### **2. Set (순서가 없는 자료구조, 중복 불가)**
| 구현 클래스 | 특징 |
|-------------|----------------|
| `HashSet<E>` | 해시 기반, 빠른 검색 |
| `LinkedHashSet<E>` | 입력 순서 유지 |
| `TreeSet<E>` | 정렬된 상태 유지 |

**✅ 예제**
```java
Set<String> set = new HashSet<>();
set.add("A");
set.add("B");
set.add("A");  // 중복 추가 불가
System.out.println(set); // [A, B]
```

---

### **3. Map (Key-Value 쌍으로 저장)**
| 구현 클래스 | 특징 |
|-------------|----------------|
| `HashMap<K, V>` | 해시 기반, 빠른 검색 |
| `LinkedHashMap<K, V>` | 입력 순서 유지 |
| `TreeMap<K, V>` | Key 정렬된 상태 유지 |
| `Hashtable<K, V>` | 동기화 지원 (멀티스레드 환경) |

**✅ 예제**
```java
Map<Integer, String> map = new HashMap<>();
map.put(1, "One");
map.put(2, "Two");
System.out.println(map.get(1)); // One
```

---

### **📌 정리**
- **List** → 순서 O, 중복 허용 O (`ArrayList`, `LinkedList`)
- **Set** → 순서 X, 중복 허용 X (`HashSet`, `TreeSet`)
- **Map** → Key-Value 저장 (`HashMap`, `TreeMap`)

**💡 상황에 맞는 컬렉션 선택이 중요!** 🚀