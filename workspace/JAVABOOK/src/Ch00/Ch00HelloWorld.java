package Ch00;
//Ch00이란 이름의 package 
public class Ch00HelloWorld {	// 클래스 영역(객체지향 문법 적용 범위)
//	자바 클래스 생성
//	1. Java Project  new 생성 - JAVABOOK
//	2. src폴더에 pakage 생성
//	3. pakage에 클래스생성
	
	
// -------------------------	
//	1.Programming Language
// -------------------------
//	Pro	 		+ 	gram
//	-미리, -사전의    쓰다, 적다
	
//	COMPUTE는 왜 있나?
//	compute : 계산하다
//	computer : 계산기

//	자바 프로그램의 실행 과정에서
//	디스크(disk)는 프로그램과 데이터의 영구 저장소,
//	램(RAM)은 실행 중인 데이터와 코드의 임시 저장소 = 휘발성메모리,
//	CPU는 실제 명령어 실행과 연산을 담당합니다.
//	이 세 요소는 서로 협력하여 프로그램이 원활하게 실행되도록 합니다.
	
//	JAVA 언어 : 절차지향 문법(C) + 객체지향 문법(C++)
//	절차지향:
//	명령어의 순서대로 실행되는 방식으로, 함수나 메서드를 중심으로 문제를 해결합니다.
//
//	객체지향:
//	데이터를 객체로 캡슐화하고, 클래스와 객체를 통해 문제를 모델링하며,
//	상속과 다형성 등을 활용해 코드의 재사용성과 유지보수성을 높입니다.
	

// -------------------------		
//	Java 실행 과정에서의 처리 관계
// -------------------------	
//	1. 컴페일 및 저장 :
//		자바 소스코드(.java)는 컴파일러에 의해 바이트코드(.class 파일)로 변환되어 디스크에 저장됩니다.
//	
//	2. JVM의 클래스 로딩
//		자바 프로그램을 실행하면 JVM이 디스크에서 필요한 .class 파일들을 읽어들입니다.
//		이때, 디스크에서 읽은 데이터는 RAM으로 로드되어 JVM의 실행 환경(클래스 로더, 메모리 영역 등)을 구성합니다.
//		
//	3. 실행 및 처리 :
//		CPU는 RAM에 로드된 자바 바이트코드를 해석(JIT 컴파일러를 통한 네이티브 코드 변환 포함)하고 실행합니다.
//		실행 중 필요한 변수, 객체, 메서드 호출 등은 모두 RAM 내에서 이루어지며, CPU가 빠르게 처리합니다.
//		
//	4. 파일 I/O 처리 :
//		자바 프로그램이 파일 입출력 작업을 수행할 때(예: 파일 읽기/쓰기), 요청은 디스크와의 데이터 전송으로 이어집니다.
//		이 과정에서도 디스크의 데이터를 읽어 RAM으로 로드한 후 CPU가 이를 처리하며, 다시 변경된 데이터를 디스크에 저장할 수 있습니다.
	

	public static void main(String[] args) {	// 메서드 영역(절차지향 문법 적용 범위)
		// 메서드 종류
		// 라이브러리 메서드	: 미리 만들어져 제공되는 메서드  == 도서관에 보관돼있는 책
		// 사용자정의 메서드	: 개발자에 의해 만들어지는 메서드
		// main 메서드	: 최초 실행 메서드 
		System.out.println("HELLOWORLD");	//ctrl+마우스좌클릭으로 println의 함수 파일을 열 수 있다.
		
	}

}
